name: megatron_t5_speechllm

trainer:
  devices: 1
  accelerator: gpu
  num_nodes: 1
  precision: 32
  logger: False
  enable_checkpointing: False
  use_distributed_sampler: False
  max_epochs: -1
  max_steps: 250000
  log_every_n_steps: 10
  val_check_interval: null
  check_val_every_n_epoch: 1

exp_manager:
  explicit_log_dir: null
  exp_dir: null
  name: ${name}
  create_wandb_logger: False
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 3
    mode: min
    save_nemo_on_train_end: False # Should be false, correct prompt learning model file is saved at model.nemo_path set below
    filename: "megatron_t5_speechllm_tts--{${exp_manager.checkpoint_callback_params.monitor}:.3f}-{step}"
    model_parallel_size: ${model.tensor_model_parallel_size}
    save_best_model: True
  create_early_stopping_callback: False
  early_stopping_callback_params:
    monitor: "val_loss"
    mode: "min"
    min_delta: 0.001
    patience: 10
    verbose: True

model:
  seed: 1234
  nemo_path: ${name}.nemo # .nemo filename/absolute path to where the virtual prompt model parameters will be saved
  virtual_prompt_style: "p-tuning" # one of 'prompt-tuning', 'p-tuning', or 'inference'
  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1
  global_batch_size: 2
  micro_batch_size: 2 # micro batch size should equal global batch size when pipeline parallel = 1
  validation_global_batch_size: ${model.global_batch_size}
  validation_micro_batch_size: ${model.micro_batch_size}
  validation_drop_last: False
  report_validation_metric: False
  validation_metric: accuracy
  num_speech_tokens: 10112 # Vocabulary size pertaining to speech
  seq_pattern: "parallel" # parallel, delay_parallel, flatten
  attn_prior_scaledown_start_step: 10000
  attn_prior_end_step: 11000
  return_all_crossattention_probs: True
  num_cross_attention_heads: 12 # 12 for 220m, 16 for 3b.
  restore_path: null # Path to an existing p-tuned/prompt tuned .nemo model you wish to add new tasks to or run inference with
  save_nemo_on_validation_end: True # Saves an inference ready .nemo file every time a checkpoint is saved during training.
  existing_tasks: []
  new_tasks: ["squad"]
  freeze_model: false
  use_alignment_loss: true
  codecmodel_type: nemo_codec
  codecmodel_path: ???
  english_only_model: true
  context_conditioning: decoder
  train_from_scratch: true
  override_tokenizer_vocab_file: ???
  use_flash_attention: false
  lm_vocab_size: 30000
  max_position_embeddings: ${model.data.max_seq_length}

  frozen_model:
    # micro_batch_size: null
    # global_batch_size: null
    # megatron_amp_O2: true
    # seq_length: 512
    # max_position_embeddings: 512
    # precision: bf16
    # Above is overridden in code
    tensor_model_parallel_size: 1
    pipeline_model_parallel_size: 1
    pipeline_model_parallel_split_rank: 0
    make_vocab_size_divisible_by: 128
    pre_process: true
    post_process: true
    gradient_as_bucket_view: true
    native_amp_init_scale: 4294967296
    native_amp_growth_interval: 1000
    fp16_lm_cross_entropy: false
    seed: 1234
    use_cpu_initialization: false
    apex_transformer_log_level: 30
    tokenizer:
      library: megatron
      type: BertWordPieceCase
      model: null
      vocab_file: null
      merge_file: null
      # num_sentinel_tokens: 100
    optim:
      name: null
    data:
      dataset_type: t5
    encoder:
      arch: transformer
      bias_activation_fusion: false
      use_flash_attention: ${model.use_flash_attention}
      num_layers: 12
      hidden_size: 768
      ffn_hidden_size: 2048
      num_attention_heads: 12
      init_method_std: 0.015
      hidden_dropout: 0.1
      attention_dropout: 0.1
      kv_channels: 64
      activation: geglu
    decoder:
      arch: transformer
      bias_activation_fusion: false
      use_flash_attention: ${model.use_flash_attention}
      num_layers: 12
      hidden_size: 768
      ffn_hidden_size: 2048
      num_attention_heads: 12
      init_method_std: 0.015
      hidden_dropout: 0.1
      attention_dropout: 0.1
      kv_channels: 64
      activation: geglu

  task_templates:
  - taskname: "squad"
    prompt_template: "<|VIRTUAL_PROMPT_0|> {context} {question} {answer}"
    total_virtual_tokens: 3
    virtual_token_splits: [3]
    truncate_field: context
    answer_field: answer

  p_tuning: # P-tuning specific params
      encoder_type: "mlp" # Either "mlp" or "lstm", mlp is default
      num_layers: 2 # 2 recommended for MLP, 1 recommended for LSTM, must be at least 2 for mlp
      dropout: 0.0

  prompt_tuning: # Prompt tunin specific params
    new_prompt_init_methods: ['text'] # List of 'text' or 'random', should correspond to tasks listed in new tasks
    new_prompt_init_text: ['some init text goes here'] # some init text if init method is text, or None if init method is random

  data:
    grapheme_prefix: null
    use_lhotse: true
    lhotse_train_ds:
      # Example of how to specify paths to multiple datasets
      # manifest_filepath:
      #   - /path/to/squad.jsonl
      #   - /path/to/mnli.jsonl
      #   - /path/to/boolq.jsonl
      # Example of how each dataset is formatted
      # {'audio_filepath': 'audio1.wav', 'offset': 0.0, 'duration': 12.3, 'question': 'transcribe this audio', 'answer': 'I have a dream...'}
      # the 'answer' field can also be 'text', and a default 'question' field is added if missing in manigests, so as to work with ASR manifests
      input_cfg:
      # - type: nemo_tarred
      #   manifest_filepath: /home/jasoli/data_prime/ASR/Suno/yt10k_en/sharded_manifests/bucket1/manifest__OP_0..511_CL__punctuation_removed.json
      #   tarred_audio_filepaths: /home/jasoli/data_prime/ASR/Suno/yt10k_en/bucket1/audio__OP_0..511_CL_.tar
      #   weight: 0.5
      #   tags:
      #     lang: en
      #     pnc: no
      - type: lhotse_shar
        shar_path: /home/jasoli/data_prime/shars/5k_LRHM_highsim
        weight: 0.5
        tags:
          lang: en
          tts: True
      global_batch_size: ${model.global_batch_size}
      micro_batch_size: ${model.micro_batch_size}
      shuffle: True
      num_workers: 0
      pin_memory: True
      max_seq_length: ${model.data.max_seq_length}
      min_seq_length: 1
      drop_last: True
      # Notably, the data weights are controlled by either bucketing_weights
      # or concat_sampling_probabilities depending on the dataset type (tar and
      # non-tar).
      # See audio_text_qa_dataset.py for details.
      concat_sampling_probabilities: null # When providing a list of datasets, this arg defines the sampling probabilities from each dataset when strategy='random'
      context_key: 'context'
      answer_key: 'answer'
      add_eos: True
      # add_eos: False
      add_sep: True
      add_bos: False
      separate_prompt_and_response_with_newline: False
      truncation_field: "context" # Options: ['context', 'answer']
      index_mapping_dir: null # Path to a directory to write index mapping files.
      prompt_template: "Q: {context}\nA: {answer}" # fstring to use for assistant prompt. Example: "Q: {input}\nA: {output}"
      # ASR configs
      sample_rate: 16000 #${model.audio_encoder.preprocessor.sample_rate}
      max_duration: 24 # it is set for LibriSpeech, you may need to update it for your dataset
      min_duration: 0.1
      # tarred datasets
      is_tarred: false
      tarred_audio_filepaths: null
      shuffle_n: 2048
      # bucketing params
      bucketing_strategy: "fully_randomized"
      bucketing_batch_size: null
      # sample_alpha: 0.1
      use_lhotse: True
      text_field : "answer"
      batch_duration : 80  # 0
      quadratic_duration : 30
      max_open_streams: 50
      num_buckets : 30
      buffer_size : 10000
      shuffle_buffer_size : 10000
      duration_bins: [2.92,3.474,3.924,4.335,4.728,5.11,5.487,5.872,6.288,6.696,7.128,7.62,8.208,8.934,9.883,10.56,11.22,11.88,12.51,13.05,13.59,14.13,14.64,15.17875,15.81,16.54,17.37,18.241,19.18]
      lm_vocab_size: ${model.lm_vocab_size}
      g2p_conf:
        _target_: nemo.collections.tts.g2p.models.i18n_ipa.IpaG2p
        phoneme_dict: "scripts/tts_dataset_files/ipa_cmudict-0.7b_nv23.01.txt"
        heteronyms: "scripts/tts_dataset_files/heteronyms-052722"
        phoneme_probability: 0.8
        ignore_ambiguous_words: False
        use_chars: True
        use_stresses: True
        grapheme_prefix: ${model.data.grapheme_prefix}
      # sample_alpha: 0.1
    validation_ds: ???
    max_seq_length: 2048
    sample_rate: 24000
    add_eos: true
    add_bos: false
    use_attention_prior: true
    attention_prior_scaling_factor: 0.05
    cross_attention_epsilon: 0.0
    decoder_starts_with_pad: False
    add_eos_to_decoder_output: True
    add_sentinel_to_input: True
    ul2_prompt_token: null # <extra_id_s>, <extra_id_r>, <extra_id_x>
    shuffle: true
    num_workers: 4
    pin_memory: true
    speech_offset: 30128
    train_task: all
    num_speech_codebooks: 8
    codebook_fps: 86
    context_duration_min: 2.9
    context_duration_max: 2.9
    g2p:
      english:
        _target_: nemo.collections.tts.g2p.models.i18n_ipa.IpaG2p
        phoneme_dict: "scripts/tts_dataset_files/ipa_cmudict-0.7b_nv23.01.txt"
        heteronyms: "scripts/tts_dataset_files/heteronyms-052722"
        phoneme_probability: 0.8
        ignore_ambiguous_words: False
        use_chars: True
        use_stresses: True
        grapheme_prefix: ${model.data.grapheme_prefix}
      spanish:
        _target_: nemo.collections.tts.g2p.models.i18n_ipa.IpaG2p
        phoneme_dict: "scripts/tts_dataset_files/es_ES/es_ES_nv230301.dict"
        phoneme_probability: 0.8
        use_chars: True
        use_stresses: True
        ignore_ambiguous_words: False
        grapheme_prefix: ${model.data.grapheme_prefix}
        locale: "es-ES"
      mandarin:
        _target_: nemo.collections.tts.g2p.models.zh_cn_pinyin.ChineseG2p
        phoneme_dict: "scripts/tts_dataset_files/zh/36finals/ipa_dict_nv23.05.txt"
        word_segmenter: "jieba"
        phoneme_prefix: ""
        phoneme_case: "lower"
        tone_prefix: "#"
        ascii_letter_prefix: ${model.data.grapheme_prefix}
        ascii_letter_case: "upper"
      german:
        _target_: nemo.collections.tts.g2p.models.i18n_ipa.IpaG2p
        phoneme_dict: "scripts/tts_dataset_files/de/de_nv230119.dict"
        heteronyms: "scripts/tts_dataset_files/de/de_nv230119.heteronym"
        phoneme_probability: 0.8
        ignore_ambiguous_words: False
        use_chars: True
        use_stresses: True
        grapheme_case: mixed
        grapheme_prefix: ${model.data.grapheme_prefix}
        locale: "de-DE"

  optim:
    name: fused_adam
    lr: 1e-4
    weight_decay: 0.01
    betas:
    - 0.9
    - 0.98
    sched:
      name: CosineAnnealing
      warmup_steps: 1000
      constant_steps: 0
      min_lr: 1e-5
      monitor: val_loss
      reduce_on_plateau: false